name: Deploy and Destroy Backend

on:
  push:
    branches:
      - developer  # Trigger on push to developer branch
    paths:
      - 'backend/**'
  workflow_dispatch:  # Allow manual triggers

# Concurrency control to ensure only one workflow runs at a time
concurrency:
  group: deploy-and-destroy-backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Deploy to dev environment
  deploy-dev:
    if: github.ref == 'refs/heads/developer'  # Only run for developer branch
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use the JSON credentials
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  # Required for SERVICE_PRINCIPAL
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}  # Required for SERVICE_PRINCIPAL
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Required for SERVICE_PRINCIPAL
          enable-AzPSSession: true  # Optional: Enable PowerShell session

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend

      - name: Terraform Plan for Dev
        id: plan-dev
        run: terraform plan -var-file=dev.tfvars
        working-directory: ./backend

      - name: Terraform Apply for Dev
        id: apply-dev
        run: terraform apply -auto-approve -var-file=dev.tfvars
        working-directory: ./backend

  # Deploy to prod environment (manual approval)
  deploy-prod:
    if: github.event_name == 'workflow_dispatch'  # Only run when manually triggered
    runs-on: ubuntu-latest
    needs: deploy-dev  # Ensure dev is deployed first

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use the JSON credentials
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  # Required for SERVICE_PRINCIPAL
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}  # Required for SERVICE_PRINCIPAL
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Required for SERVICE_PRINCIPAL
          enable-AzPSSession: true  # Optional: Enable PowerShell session

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend

      - name: Terraform Plan for Prod
        id: plan-prod
        run: terraform plan -var-file=prod.tfvars
        working-directory: ./backend

      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: team-leads  # Replace with your team's GitHub username or team name

      - name: Terraform Apply for Prod
        id: apply-prod
        run: terraform apply -auto-approve -var-file=prod.tfvars
        working-directory: ./backend

  # Destroy dev infrastructure (manual trigger)
  destroy-dev:
    if: github.event_name == 'workflow_dispatch'  # Only run when manually triggered
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use the JSON credentials
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  # Required for SERVICE_PRINCIPAL
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}  # Required for SERVICE_PRINCIPAL
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Required for SERVICE_PRINCIPAL
          enable-AzPSSession: true  # Optional: Enable PowerShell session

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend

      - name: Terraform Plan for Destroy (Dev)
        id: plan-destroy-dev
        run: terraform plan -destroy -var-file=dev.tfvars
        working-directory: ./backend

      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: team-leads  # Replace with your team's GitHub username or team name

      - name: Terraform Destroy (Dev)
        id: destroy-dev
        run: terraform destroy -auto-approve -var-file=dev.tfvars
        working-directory: ./backend

  # Destroy prod infrastructure (manual trigger)
  destroy-prod:
    if: github.event_name == 'workflow_dispatch'  # Only run when manually triggered
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Use the JSON credentials
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  # Required for SERVICE_PRINCIPAL
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}  # Required for SERVICE_PRINCIPAL
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Required for SERVICE_PRINCIPAL
          enable-AzPSSession: true  # Optional: Enable PowerShell session

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./backend

      - name: Terraform Plan for Destroy (Prod)
        id: plan-destroy-prod
        run: terraform plan -destroy -var-file=prod.tfvars
        working-directory: ./backend

      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: team-leads  # Replace with your team's GitHub username or team name

      - name: Terraform Destroy (Prod)
        id: destroy-prod
        run: terraform destroy -auto-approve -var-file=prod.tfvars
        working-directory: ./backend